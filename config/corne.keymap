/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// https://github.com/urob/zmk-config#timeless-homerow-mods
// troubleshooting : https://github.com/urob/zmk-config#troubleshooting

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "accents.dtsi"
#include "keys_fr.h"
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/42.h"
#include "zmk-helpers/unicode-chars/french.dtsi"
#include <dt-bindings/zmk/bt.h>
#define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <../boards/shields/corne/boards/nice_nano.overlay>

// Overwrite number of leds on the keyboard. A Corne has 27 per side.
&led_strip { chain-length = <27>; };

#define DEF 0
#define I3 1
#define NAV 2
#define NUM 3
#define FUN 4
#define MINECRAFT 5


#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

ZMK_BEHAVIOR(ht, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&kp>;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )
//tap: / | shift + tap: |  | ctrl + shift + tap: "\"

SIMPLE_MORPH(slh_inner_morph, CTL, &kp PIPE, &kp BSLH)
ZMK_BEHAVIOR(slh_morph, mod_morph,
    mods = <(MOD_LCTL|MOD_RCTL|MOD_LSFT|MOD_RSFT)>; \
    bindings = <&kp FSLH>, <&slh_inner_morph>; \
)

// tap: question mark | shift + tap : exclamation
SIMPLE_MORPH(excl_morph, SFT, &kp QMARK, &kp EXCL)

// tap: ' | shift + tap: " | ctrl + shift + tap: `
ZMK_BEHAVIOR(macro_sqt, macro,
    tap-ms = <10>;
    bindings = <&macro_tap &kp SQT &kp SPACE>;
)ZMK_BEHAVIOR(macro_dqt, macro,
    tap-ms = <10>;
    bindings = <&macro_tap &kp DQT &kp SPACE>;
)ZMK_BEHAVIOR(macro_bqt, macro,
    tap-ms = <10>;
    bindings = <&macro_tap &kp GRAVE &kp SPACE>;
)

SIMPLE_MORPH(quotes_inner_morph, CTL, &macro_dqt, &macro_bqt)
ZMK_BEHAVIOR(quotes_morph, mod_morph,
    mods = <(MOD_LCTL|MOD_RCTL|MOD_LSFT|MOD_RSFT)>; \
    bindings = <&macro_sqt>, <&quotes_inner_morph>; \
)

// tap: connect corne | shift + tap: quit
ZMK_BEHAVIOR(macro_corne, macro,
    tap-ms = <10>;
    bindings = 
    <&macro_wait_time 2000>,
    <&macro_tap &kp LG(RET)>,
    <&macro_wait_time 30>,
    <&macro_tap &kp C &kp O &kp R &kp N &kp E>,
    <&macro_wait_time 1000>,
    < &kp RET &kp LG(Q)>;
)
SIMPLE_MORPH(connect, SFT, &macro_corne, &kp LG(ESC))
ZMK_BEHAVIOR(ht_connect, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&connect>;
)
// &ht_connect LG(ESC) 0

// tap: S | alt + tap: $
SIMPLE_MORPH(s_morph, ALT, &kp S, &kp DOLLAR)

// tap: E | alt + tap: €
SIMPLE_MORPH(e_morph, ALT, &kp E, &kp US_EURO)

// tap: comma | shift + tap: semicolon
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp SEMICOLON)

// tap: dot | shift + tap: colon
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp COLON)

// tap : () | shift + tap : {} | ctrl + tap : []
SIMPLE_MORPH(all_paro1, ALT, &kp LBRC, &kp LBKT)
ZMK_BEHAVIOR(all_paro, mod_morph,
    mods = <(MOD_LALT|MOD_RALT|MOD_LSFT|MOD_RSFT)>; \
    bindings = <&kp LPAR>, <&all_paro1>; \
)
SIMPLE_MORPH(all_parf1, ALT, &kp RBRC, &kp RBKT)
ZMK_BEHAVIOR(all_parf, mod_morph,
    mods = <(MOD_LALT|MOD_RALT|MOD_LSFT|MOD_RSFT)>; \
    bindings = <&kp RPAR>, <&all_parf1>; \
)
// hold : parenthesis close | tap : parenthesis open
ZMK_BEHAVIOR(ht_par, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&all_parf>, <&all_paro>;
)

// hold : CAPS | tap : caps_word
ZMK_BEHAVIOR(ht_caps, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&caps_word>;
)

ZMK_COMBO(cut, &kp LC(X), LB4 LB2, ALL)
ZMK_COMBO(copy, &kp LC(C), LB4 LB3, ALL)
ZMK_COMBO(paste, &kp LC(V), LB3 LB2, ALL)
ZMK_COMBO(undo, &kp LC(Z), LB4 LB1, ALL)
ZMK_COMBO(redo, &kp LC(Y), LB4 LB0, ALL)
ZMK_COMBO(caps, &ht_caps CAPS 0, LM1 RM1, ALL)
ZMK_COMBO(save, &kp LC(S), LM1 LM0, ALL)
ZMK_COMBO(select_all, &kp LC(A), LM3 LM4, ALL)
ZMK_COMBO(replace, &kp LC(H), LT1 LT2, ALL)


// tap: < | shift + tap: > | hold: <>
SIMPLE_MORPH(chevrons_morph, SFT, &kp LT, &kp GT)
ZMK_BEHAVIOR(macro_chevrons, macro,
    tap-ms = <10>;
    bindings = <&macro_tap &kp LT &kp GT &kp LEFT>;
)
ZMK_BEHAVIOR(ht_chevrons_morph, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&macro_chevrons>, <&chevrons_morph>;
)
ZMK_COMBO(chevrons, &ht_chevrons_morph 0 0, RB3 RB4, ALL)
ZMK_COMBO(slash, &slh_morph, LT1 LT0, ALL)
ZMK_COMBO(star, &kp STAR, RB0 RB4, ALL)
ZMK_COMBO(at, &kp AT, LM1 RM3, ALL)
ZMK_COMBO(hash, &kp HASH, RB2 RB3, ALL)
ZMK_COMBO(prc, &kp PERCENT, RB1 RB2, ALL)
ZMK_COMBO(and, &kp AMPS, LM1 RM2, ALL)

// tap: = | hold: !=
ZMK_BEHAVIOR(macro_diff, macro,
    tap-ms = <10>;
    bindings = <&macro_tap &kp EXCL &kp EQUAL>;
)
ZMK_BEHAVIOR(ht_equal, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&macro_diff>, <&kp>;
)
ZMK_COMBO(equal_diff, &ht_equal 0 EQUAL, RB0 RB1, ALL)
ZMK_COMBO(eacu, &kp US_EACU, RM1 RM2, ALL)
ZMK_COMBO(egrv, &ac_egrv, RM2 RM3, ALL)
ZMK_COMBO(ecir, &ac_ecir, RT2 RM2, ALL)
ZMK_COMBO(agrv, &ac_agrv, RT2 RM3, ALL)
ZMK_COMBO(circ, &kp CARET, LB2 LB1, ALL)
ZMK_COMBO(trema, &kp DQT, LM2 LM1, ALL)
ZMK_COMBO(cced, &kp US_CCED, LM3 LM2, ALL)
ZMK_COMBO(combo_k, &kp K, RT2 RT3, ALL)  // O + Q for K
ZMK_COMBO(combo_z, &kp Z, RM3 RM4, ALL)  // A + H for Z
ZMK_COMBO(combo_u_grave, &ac_ugrv, RT0 RT1, ALL)  // ' + U for Ù

// left-hand keys
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 
// right-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  
// thumb keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

// left-hand HRMs
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)

// right-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)

MAKE_HRM(hml_s, &kp, &s_morph, KEYS_R THUMBS)
MAKE_HRM(hmr_e, &kp, &e_morph, KEYS_L THUMBS)

// tap: minus | alt + tap: tilde 
SIMPLE_MORPH(minus_morph, ALT, &kp MINUS, &kp TILDE)

ZMK_BEHAVIOR(lt_cstm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&kt>;
)

ZMK_MACRO_ONE_PARAM(macro_cb,
    tap-ms = <10>;
    bindings = <&macro_press &kp LCTRL &kp B>,
               <&macro_release &kp LCTRL &kp B>,
               <&macro_param_1to1>, <&kp MACROPLACEHOLDER>;
)


ZMK_LAYER(base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp TAB         &kp W         &kp G         &kp M         &kp F      &excl_morph     &quotes_morph   &kp U         &kp O         &kp Q         &kp J        XXX
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &hml LGUI R   &hml_s LALT 0   &hml LCTRL N  &hml LSHFT T   &kp B        &kp Y         &hmr RSHFT I  &hmr_e LCTRL 0  &hmr LALT A  &hmr LGUI H  &kp LC(PG_UP)
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX            &kp X         &kp C         &kp L         &kp D         &kp V           &minus_morph    &kp P     &ht_par 0 0    &comma_morph  &dot_morph    &kp LC(PG_DN)
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                        &lt_cstm NUM LALT    &lt NAV SPACE &lt I3 DEL      &kp BSPC     &kp RET       &lt FUN ESC                                            
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(i3,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp LA(TAB)  &macro_cb N3  &macro_cb N2  &macro_cb N1  &macro_cb N0   XXX             XXX           XXX           XXX           XXX           XXX             &kp LG(Q) 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LG(N5)    &kp LG(N4)    &kp LG(N3)    &kp LG(N2)    &kp LG(N1)     XXX             XXX          &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP)    &kp LG(RIGHT)   XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX             XXX           XXX           XXX           XXX           XXX           XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX            &kp LSHIFT     &kp LG(RET)         XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(nav,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           XXX           XXX           XXX           XXX           XXX             &kp PG_UP     &kp HOME      &kp END       XXX           XXX             &kp LG(Q) 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &kp LGUI       &kp LALT     &kp LCTRL     &kp LSHIFT     XXX             &kp PG_DN    &kp LEFT       &kp DOWN      &kp UP        &kp RIGHT      XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX             XXX           XXX           XXX           XXX           XXX           XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX             XXX           XXX           XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(num,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           XXX           XXX           XXX           XXX           XXX             &kp STAR      &kp N7        &kp N8        &kp N9         XXX          XXX          
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &kp LGUI       &kp LALT     &kp LCTRL     &kp LSHIFT     XXX             &kp FSLH      &kp N4        &kp N5         &kp N6        &kp N0         XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX             ___          &kp N1         &kp N2        &kp N3         ___           XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX             XXX           XXX           XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_BEHAVIOR(tg_bt, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&bt>, <&bt>;
)

ZMK_LAYER(fun,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &bt BT_SEL 5 &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2   &bt BT_SEL 1 &kp C_NEXT       &kp C_VOL_UP   &kp F7        &kp F8        &kp F9        &kp F12      &to MINECRAFT          
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &bt BT_CLR    &kp LGUI      &kp LALT      &kp LCTRL    &kp LSHIFT    &kp C_PP         &kp C_MUTE    &kp F4        &kp F5         &kp F6       &kp F10      XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           &out OUT_BLE &out OUT_USB &kp C_PREV       &kp C_VOL_DN &kp F1         &kp F2        &kp F3        &kp F11      XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX             XXX           XXX           XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)



ZMK_BEHAVIOR(toggle, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&kp>, <&kt>;
)




ZMK_LAYER(minecraft,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &ht TAB ESC   &ht LC(Q) Q    &kp W        &kp E        &toggle R R    &kp F4          XXX           XXX           XXX           XXX           XXX           &to DEF          
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &toggle LSHFT LSHFT &kp A    &kp S        &kp D         &kp F         &kp B           XXX           XXX           XXX           XXX           XXX           &kp PG_DN  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp M         &kp X          &kp C         &kp L        &kp G         &kp V           XXX           XXX           XXX           XXX           XXX           &kp PG_UP       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              &kp F5        &kp SPACE     &kp F3          XXX           &kp RET       XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

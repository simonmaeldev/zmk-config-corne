/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// https://github.com/urob/zmk-config#timeless-homerow-mods
// troubleshooting : https://github.com/urob/zmk-config#troubleshooting

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "../zmk-nodefree-config/international_chars/french.dtsi"
#include <dt-bindings/zmk/bt.h>
#define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <../boards/shields/corne/boards/nice_nano.overlay>

// Overwrite number of leds on the keyboard. A Corne has 27 per side.
&led_strip { chain-length = <27>; };

#define DEF 0
#define I3 1
#define NAV 2
#define NUM 3
#define FUN 4


#define XXX &none
#define ___ &trans

/* Global settings */

#define QUICK_TAP_MS 175

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: question mark | shift + tap : exclamation
SIMPLE_MORPH(excl_morph, SFT, &kp QMARK, &kp EXCL)

// tap: ' | shift + tap: " | ctrl + shift + tap: `
ZMK_BEHAVIOR(macro_grave, macro,
    wait-ms = <30>;
    tap-ms = <10>;
    bindings = <&kp GRAVE &kp SPACE>;
)
SIMPLE_MORPH(quotes_morph, SFT, &kp SQT, &quotes_inner_morph)
SIMPLE_MORPH(quotes_inner_morph, CTL, &kp DQT, &macro_grave)

// tap: qu | alt + tap: k | hold: q
ZMK_BEHAVIOR(macro_qu, macro,
    wait-ms = <30>;
    tap-ms = <10>;
    bindings = <&kp Q &kp U>;
)
ZMK_BEHAVIOR(ht_qqu, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&macro_qu>, <&kp>;
)
SIMPLE_MORPH(qk_morph, ALT, &ht_qqu 0 Q, &kp K)

// tap: J | alt + tap : Z
SIMPLE_MORPH(jz_morph, ALT, &kp J, &kp Z)

// tap: connect corne | shift + tap: quit
ZMK_BEHAVIOR(macro_corne, macro,
    tap-ms = <10>;
    bindings = 
    <&macro_wait_time 2000>,
    <&macro_tap &kp LG(RET)>,
    <&macro_wait_time 30>,
    <&macro_tap &kp C &kp O &kp R &kp N &kp E>,
    <&macro_wait_time 1000>,
    < &kp RET &kp LG(Q)>;
)
SIMPLE_MORPH(connect, SFT, &macro_corne, &kp LG(ESC))

// tap: S | alt + tap: $
SIMPLE_MORPH(s_morph, ALT, &kp S, &kp DOLLAR)

// euro sign
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)  // €
// tap: E | alt + tap: €
SIMPLE_MORPH(e_morph, ALT, &kp E, &euro_sign)

// tap: comma | shift + tap: semicolon
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &kp SEMICOLON)

// tap: dot | shift + tap: colon
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &kp COLON)

ZMK_COMBO(cut, &kp LC(X), LB4 LB2, ALL)
ZMK_COMBO(copy, &kp LC(C), LB4 LB3, ALL)
ZMK_COMBO(paste, &kp LC(V), LB3 LB2, ALL)
ZMK_COMBO(undo, &kp LC(Z), LB4 LB1, ALL)
ZMK_COMBO(redo, &kp LC(Y), LB4 LB0, ALL)
ZMK_COMBO(caps, &caps_word, LM1 RM1, ALL)

// tap: < | shift + tap: > | hold: <>
SIMPLE_MORPH(chevrons_morph, SFT, &kp LT, &kp GT)
ZMK_BEHAVIOR(macro_chevrons, macro,
    tap-ms = <10>;
    bindings = <&macro_tap &kp LT &kp GT &kp LEFT>;
)
ZMK_BEHAVIOR(ht_chevrons_morph, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&macro_chevrons>, <&chevrons_morph>;
)
ZMK_COMBO(chevrons, &ht_chevrons_morph, RB3 RB4, ALL)

//tap: / | shift + tap: |  | ctrl + shift + tap: \
SIMPLE_MORPH(slh_morph, SFT, &kp FSLH, &slh_inner_morph)
SIMPLE_MORPH(slh_inner_morph, CTL, &kp PIPE, &kp BSLH)
ZMK_COMBO(slh, &slh_morph, LT1 LT0, ALL)
ZMK_COMBO(star, &kp STAR, RB0 RB4, ALL)
ZMK_COMBO(at, &kp AT, LM1 RM3, ALL)
ZMK_COMBO(hash, &kp HASH, RB2 RB3, ALL)
ZMK_COMBO(prc, &kp PERCENT, RB1 RB2, ALL)
ZMK_COMBO(and, &kp AMPS, LM1 RM2, ALL)

// tap: = | hold: !=
ZMK_BEHAVIOR(macro_diff, macro,
    tap-ms = <10>;
    bindings = <&macro_tap &kp EXCL &kp EQUAL>;
)
ZMK_BEHAVIOR(ht_equal, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&macro_diff>, <&kp EQUAL>;
)
ZMK_COMBO(equal_diff, &ht_equal, RB0 RB1, ALL)
ZMK_COMBO(eacu, &fr_e_acute, RM1 RM2, ALL)
ZMK_COMBO(egrv, &fr_e_grave, RM2 RM3, ALL)
ZMK_COMBO(ecir, &fr_e_circumflex, RT2 RM2, ALL)
ZMK_COMBO(agrv, &fr_a_grave, RT2 RM3, ALL)
ZMK_COMBO(circ, &kp CARET, LB1 LB0, ALL)
ZMK_COMBO(trema, &kp DQT, LT1 LT0, ALL)
ZMK_COMBO(cced, &fr_c_cedilla, LM3 LM2, ALL)




//ZMK_COMBO(save, &kp LC(X), LT1 LT3, ALL)
//ZMK_COMBO(select_all, &kp LC(X), LT1 LT3, ALL)
//ZMK_COMBO(search, &kp LC(X), LT1 LT3, ALL)
//ZMK_COMBO(replace, &kp LC(X), LT1 LT3, ALL)


// left-hand keys
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 
// right-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  
// thumb keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

// left-hand HRMs
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)

// right-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)

MAKE_HRM(hml_s, &kp, &s_morph, KEYS_R THUMBS)
MAKE_HRM(hmr_e, &kp, &e_morph, KEYS_L THUMBS)


ZMK_LAYER(base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp TAB         &kp W         &kp G         &kp M         &kp F      &excl_morph     &quotes_morph   &u_morph         &kp O      &qk_morph     &jz_morph      &connect 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &hml LGUI R   &hml_s LALT 0   &hml LCTRL N  &hml LSHFT T   &kp B           &kp Y      &hmr RSHFT I  &hmr_e LCTRL 0  &hmr LALT A  &hmr LGUI H   XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &kp X         &kp C         &kp L         &kp D         &kp V           &kp MINUS         &kp P     &par_morph    &comma_morph  &dot_morph     XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                            &lt NUM RALT    &lt NAV SPACE &lt I3 DEL      &kp BSPC     &kp RET       &lt FUN ESC                                            
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(i3,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp LG(TAB)   &kp LG(N6)    &kp LG(N7)    &kp LG(N8)   &kp LG(N9)    &kp LG(N0)       XXX           XXX           XXX           XXX           XXX             &kp LG(Q) 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &kp LG(N5)    &kp LG(N4)    &kp LG(N3)    &kp LG(N2)    &kp LG(N1)       XXX          &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP)    &kp LG(RIGHT)   XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX             XXX           XXX           XXX           XXX           XXX           XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX            &kp LSHIFT     &kp LG(RET)         XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(nav,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           XXX           XXX           XXX           XXX           XXX             &kp PG_UP     &kp HOME      &kp END       XXX           XXX             &kp LG(Q) 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &kp LGUI       &kp LALT     &kp LCTRL     &kp LSHIFT     XXX             &kp PG_DN    &kp LEFT       &kp DOWN      &kp UP        &kp RIGHT      XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX             XXX           XXX           XXX           XXX           XXX           XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX             XXX           XXX           XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(num,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           XXX           XXX           XXX           XXX           XXX             &kp STAR      &kp N7        &kp N8        &kp N9         XXX          XXX          
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &kp LGUI       &kp LALT     &kp LCTRL     &kp LSHIFT     XXX             &kp FSLH      &kp N4        &kp N5         &kp N6        &kp N0         XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX             ___          &kp N1         &kp N2        &kp N3         ___           XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX             XXX           XXX           XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(fun,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &bt BT_SEL 5 &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2   &bt BT_SEL 1 &kp C_NEXT       &kp C_VOL_UP   &kp F7        &kp F8        &kp F9        &kp F11      XXX          
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX          &kp LGUI       &kp LALT     &kp LCTRL     &kp LSHIFT    &kp C_PP         &kp C_MUTE    &kp F4        &kp F5         &kp F6       &kp F10      XXX  
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX          &kp C_PREV       &kp C_VOL_DN &kp F1         &kp F2        &kp F3        &kp F11      XXX       
//╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                              XXX           XXX           XXX             XXX           XXX           XXX                                              
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯                                          
)